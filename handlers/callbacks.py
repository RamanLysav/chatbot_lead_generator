from datetime import datetime
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes
from config import ADMIN_CHAT_ID, sheet
from data.session import user_data

async def handle_nav(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    nav = query.data.replace("nav_", "")
    session = user_data.get(user_id, {})
    session.update({
        "nav": nav,
        "step": "phone",
        "reached_price": True,
        "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "first_name": update.effective_user.first_name or "‚Äî",
        "username": f"@{update.effective_user.username}" if update.effective_user.username else "‚Äî",
    })

    session["price"] = 130 if nav == "yes" else 100

    async def check_abandoned(user_id, context):
        await asyncio.sleep(300)
        s = user_data.get(user_id)
        if s and s.get("reached_price") and s.get("step") == "phone":
            msg = (
                f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª –∑–∞—è–≤–∫—É:\n"
                f"‚Ä¢ –ò–º—è: {s['first_name']}\n"
                f"‚Ä¢ Username: {s['username']}\n"
                f"‚Ä¢ Telegram ID: {user_id}\n"
                f"‚Ä¢ –ú–æ–¥–µ–ª—å: {s['model']}\n"
                f"‚Ä¢ –ì–æ–¥: {s['year']}\n"
                f"‚Ä¢ –ù–∞–≤–∏–≥–∞—Ü–∏—è: {s['nav']}\n"
                f"‚Ä¢ –¶–µ–Ω–∞: {s['price']:.2f} BYN\n"
                f"‚Ä¢ –í—Ä–µ–º—è: {s['timestamp']}"
            )
            await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=msg)

    context.application.create_task(check_abandoned(user_id, context))

    markup = ReplyKeyboardMarkup(
        [[KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)]],
        one_time_keyboard=True, resize_keyboard=True
    )
    await query.edit_message_text(
        f"‚úÖ –°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞.\nüí∞ {session['price']:.2f} BYN\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:",
    )
    await context.bot.send_message(chat_id=user_id, text="üëá –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=markup)

async def handle_notify(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    session = user_data.get(user_id)
    if not session:
        await query.edit_message_text("‚õî –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ —Å /start.")
        return

    session["reached_price"] = False
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É
    msg = (
        f"üì¨ –ó–∞—è–≤–∫–∞:\n"
        f"‚Ä¢ –ò–º—è: {session['first_name']}\n"
        f"‚Ä¢ Username: {session['username']}\n"
        f"‚Ä¢ Telegram ID: {user_id}\n"
        f"‚Ä¢ –ú–æ–¥–µ–ª—å: {session['model']}\n"
        f"‚Ä¢ –ì–æ–¥: {session['year']}\n"
        f"‚Ä¢ –ù–∞–≤–∏–≥–∞—Ü–∏—è: {session['nav']}\n"
        f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {session['phone']}\n"
        f"‚Ä¢ –¶–µ–Ω–∞: {session['price']:.2f} BYN\n"
        f"‚Ä¢ –í—Ä–µ–º—è: {timestamp}"
    )
    await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=msg)

    # –í —Ç–∞–±–ª–∏—Ü—É
    sheet.append_row([
        timestamp, session['first_name'], session['username'], str(user_id),
        session["model"], session["year"], session["nav"], session["phone"], f"{session['price']:.2f}"
    ])

    await query.edit_message_text(
        "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞.",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="start_calc")]])
    )
    user_data.pop(user_id, None)