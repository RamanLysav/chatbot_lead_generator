# handlers/flow.py

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
)
from telegram.ext import ContextTypes
from data.session import user_data

async def start_calc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
    user_data[user_id] = {"step": "model"}

    # –í–∞—Ä–∏–∞–Ω—Ç—ã –º–æ–¥–µ–ª–µ–π
    models = [
        ["EcoSport", "Fusion", "Escape"],
        ["Bronco Sport", "Edge", "F-150"],
        ["Mustang", "–î—Ä—É–≥–∞—è –º–æ–¥–µ–ª—å"],
    ]
    markup = ReplyKeyboardMarkup(models, one_time_keyboard=True, resize_keyboard=True)

    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è:")
    await context.bot.send_message(
        chat_id=user_id,
        text="üëá –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–î—Ä—É–≥–∞—è –º–æ–¥–µ–ª—å¬ª:",
        reply_markup=markup,
    )


async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    session = user_data.get(user_id)

    # –ï—Å–ª–∏ —Å–µ—Å—Å–∏–∏ –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å–∏–º –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞
    if not session:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start.")
        return

    text = update.message.text.strip()
    step = session.get("step")

    # 1) –í—ã–±–æ—Ä (–∏–ª–∏ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥) –º–æ–¥–µ–ª–∏
    if step == "model":
        if text == "–î—Ä—É–≥–∞—è –º–æ–¥–µ–ª—å":
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å –≤—Ä—É—á–Ω—É—é:", reply_markup=ReplyKeyboardRemove()
            )
            return

        session["model"] = text
        session["step"] = "year"

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —Å –≥–æ–¥–∞–º–∏
        years = [str(y) for y in range(2025, 2014, -1)]
        keyboard = [years[i : i + 3] for i in range(0, len(years), 3)] + [["–î—Ä—É–≥–æ–π –≥–æ–¥"]]
        markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

        await update.message.reply_text(
            "‚úÖ –ú–æ–¥–µ–ª—å –ø—Ä–∏–Ω—è—Ç–∞.\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥:", reply_markup=markup
        )
        return

    # 2) –í—ã–±–æ—Ä (–∏–ª–∏ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥) –≥–æ–¥–∞
    if step == "year":
        if text == "–î—Ä—É–≥–æ–π –≥–æ–¥":
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤—Ä—É—á–Ω—É—é:", reply_markup=ReplyKeyboardRemove()
            )
            return

        if not text.isdigit() or not (2010 <= int(text) <= 2025):
            await update.message.reply_text("‚õî –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ –æ—Ç 2010 –¥–æ 2025.")
            return

        session["year"] = text
        session["step"] = "phone"

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –Ω–∞–ª–∏—á–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_buttons = [
            InlineKeyboardButton("–ï—Å—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—è", callback_data="nav_yes"),
            InlineKeyboardButton("–ù–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", callback_data="nav_no"),
        ]
        markup = InlineKeyboardMarkup([nav_buttons])

        await update.message.reply_text(
            f"‚úÖ –ì–æ–¥ –ø—Ä–∏–Ω—è—Ç: {text}\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ, –µ—Å—Ç—å –ª–∏ —à—Ç–∞—Ç–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è:",
            reply_markup=markup,
        )
        return

    # 3) –í–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–∫–Ω–æ–ø–∫–∞ ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä¬ª –∏–ª–∏ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥)
    if step == "phone":
        # –ï—Å–ª–∏ –ø—Ä–∏—à—ë–ª –∫–æ–Ω—Ç–∞–∫—Ç —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
        if update.message.contact:
            phone = update.message.contact.phone_number
        else:
            phone = text

        session["phone"] = phone
        session["step"] = "confirm"

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞—è–≤–∫–∏
        confirm_buttons = [
            [InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="notify")],
            [InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="start_calc")],
        ]
        markup = InlineKeyboardMarkup(confirm_buttons)

        await update.message.reply_text(
            f"üìû –í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω: {phone}\n\n"
            "–ù–∞–∂–º–∏—Ç–µ ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É¬ª, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å.",
            reply_markup=markup,
        )
        return

async def handle_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    phone = update.message.contact.phone_number
    session = user_data.get(user_id)

    if not session or session.get("step") != "phone":
        await update.message.reply_text("‚õî –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç. –ù–∞—á–Ω–∏—Ç–µ —Å /start.")
        return

    session["phone"] = phone
    session["step"] = "confirm"

    confirm_buttons = [
        [InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="notify_me")],
        [InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="start_calc")],
    ]
    markup = InlineKeyboardMarkup(confirm_buttons)

    await update.message.reply_text(
        f"üìû –í–∞—à –Ω–æ–º–µ—Ä: {phone}\n\n–ù–∞–∂–º–∏—Ç–µ ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É¬ª, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å.",
        reply_markup=markup,
    )