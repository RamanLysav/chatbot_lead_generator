import os
import asyncio
from datetime import datetime
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    KeyboardButton,
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
#BOT_TOKEN = os.getenv("BOT_TOKEN") or "YOUR_BOT_TOKEN"
#ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID") or 123456789)
#WEBHOOK_URL = "https://chatbot-lead-generator.onrender.com"
#WEBHOOK_URL = os.getenv("WEBHOOK_URL")
# Google Sheets
#scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
#creds = ServiceAccountCredentials.from_json_keyfile_name("/etc/secrets/credentials.json", scope)
#client = gspread.authorize(creds)
#sheet = client.open("–ó–∞—è–≤–∫–∏ FORD").sheet1
from config import BOT_TOKEN, ADMIN_CHAT_ID, WEBHOOK_URL
from config import SHEET

user_data = {}

# /start —Ñ—É–Ω–∫—Ü–∏—è
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üöó –ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å", callback_data="start_calc")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± —É—Å–ª—É–≥–µ", callback_data="show_info")]
    ]
    await update.message.reply_text(
        "‚ö†Ô∏è –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú—ã –∑–∞–Ω–∏–º–∞–µ–º—Å—è –ø–µ—Ä–µ–ø—Ä–æ—à–∏–≤–∫–æ–π –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Å–∏—Å—Ç–µ–º Ford, Lincoln.\n\n"
        "üìç –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ –≥–æ—Ä–æ–¥–µ –ú–∏–Ω—Å–∫\n\n"
        "üìç –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ (–£–ù–ü: –ê–°2017923) \n\n"
        "–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏, –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å' –∏ —É–∫–∞–∂–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∞–≤—Ç–æ–º–æ–±–∏–ª—è\n\n"
        "–°–Ω–∞—á–∞–ª–∞ –≤—ã –≤–∏–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å, –∞ –ø–æ—Ç–æ–º –æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ –∑–∞—è–≤–∫—É. –ú—ã –Ω–µ —Å–æ–±–∏—Ä–∞–µ–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º\n\n",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# –ü–æ–¥ –∫–Ω–æ–ø–∫–æ–π –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± —É—Å–ª—É–≥–µ

async def show_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="go_back")]]
    await query.edit_message_text(
        "‚ÑπÔ∏è –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —Å –ú—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ Ford, Lincoln\n\n"
        "‚ÑπÔ∏è –ú—ã —Ä—É—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã–π —ç–∫—Ä–∞–Ω, —ç–∫—Ä–∞–Ω –ø—Ä–∏–±–æ—Ä–Ω–æ–π –ø–∞–Ω–µ–ª–∏, –∞ —Ç–∞–∫ –∂–µ –≥–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥\n\n"        
        "‚ÑπÔ∏è –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —á–∏–ø—ã –∏ –ø—Ä–æ—à–∏–≤–∫–∏ Ford\n\n"
        "‚ÑπÔ∏è –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —Å –≤—ã–µ–∑–¥–æ–º –ø–æ –≥.–ú–∏–Ω—Å–∫—É, –±–µ–∑ –≤—ã—Ö–æ–¥–Ω—ã—Ö.\n\n"
        "‚ÑπÔ∏è –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –∑–∞–Ω–∏–º–∞–µ—Ç 30-180 –º–∏–Ω—É—Ç.\n\n"
        "‚ÑπÔ∏è –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ, —É—Å–ª—É–≥—É –º–æ–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å –Ω–∞–ª–∏—á–Ω—ã–º –∏–ª–∏ –±–µ–∑–Ω–∞–ª–∏—á–Ω—ã–º —Ä–∞—Å—á–µ—Ç–æ–º\n\n"
        "üìû –ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å¬ª –∏ –æ—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É.",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def go_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = [
        [InlineKeyboardButton("üöó –ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å", callback_data="start_calc")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± —É—Å–ª—É–≥–µ", callback_data="show_info")]
    ]
    await query.edit_message_text(
        "‚ö†Ô∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —Å —á–µ–≥–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# –ü–æ–¥ –∫–Ω–æ–ø–∫–æ–π –ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å
async def start_calc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    user_data[user_id] = {"step": "model"}

    models = [
        ["EcoSport", "Fusion", "Escape"],
        ["Bronco Sport", "Edge", "F-150"],
        ["Mustang", "–î—Ä—É–≥–∞—è –º–æ–¥–µ–ª—å"]
    ]
    markup = ReplyKeyboardMarkup(models, one_time_keyboard=True, resize_keyboard=True)

    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è:")
    await context.bot.send_message(chat_id=user_id, text="üëá –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–î—Ä—É–≥–∞—è –º–æ–¥–µ–ª—å':", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()
    session = user_data.get(user_id)

    if not session:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start.")
        return

    step = session.get("step")

    if step == "model":
        if text == "–î—Ä—É–≥–∞—è –º–æ–¥–µ–ª—å":
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å –≤—Ä—É—á–Ω—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, Mondeo):", reply_markup=ReplyKeyboardRemove())
            return
        session["model"] = text
        session["step"] = "year"
        years = [str(y) for y in range(2025, 2014, -1)]
        keyboard = [years[i:i+3] for i in range(0, len(years), 3)]
        keyboard.append(["–î—Ä—É–≥–æ–π –≥–æ–¥"])
        markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        await update.message.reply_text("‚úÖ –ú–æ–¥–µ–ª—å –ø—Ä–∏–Ω—è—Ç–∞.\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", reply_markup=markup)

    elif step == "year":
        if text == "–î—Ä—É–≥–æ–π –≥–æ–¥":
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤—Ä—É—á–Ω—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2012):", reply_markup=ReplyKeyboardRemove())
            return
        if not text.isdigit() or not (2010 <= int(text) <= 2025):
            await update.message.reply_text("‚õî –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ –æ—Ç 2010 –¥–æ 2025.")
            return
        session["year"] = text
        session["step"] = "nav"
        await update.message.reply_text("‚úÖ –ì–æ–¥ –ø—Ä–∏–Ω—è—Ç.", reply_markup=ReplyKeyboardRemove())
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ï—Å—Ç—å", callback_data="nav_yes")],
            [InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="nav_no")]
        ]
        await update.message.reply_text("–ï—Å—Ç—å –ª–∏ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è?", reply_markup=InlineKeyboardMarkup(keyboard))

    elif step == "phone":
        if not text.startswith("+375") or len(text) < 13:
            await update.message.reply_text("‚õî –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +375XXXXXXXXX (–ø—Ä–∏–º–µ—Ä: +375291234567).")
            return
        session["phone"] = text
        session["reached_price"] = False
        keyboard = [[InlineKeyboardButton("üìû –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞—è–≤–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="notify_me")]]
        msg = (
            f"üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n"
            f"‚Ä¢ –ú–æ–¥–µ–ª—å: {session['model']}\n"
            f"‚Ä¢ –ì–æ–¥: {session['year']}\n"
            f"‚Ä¢ –ù–∞–≤–∏–≥–∞—Ü–∏—è: {session['nav']}\n"
            f"‚Ä¢ –¶–µ–Ω–∞: {session['price']:.2f} BYN\n"
            f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {session['phone']}"
        )
        await update.message.reply_text(msg, reply_markup=InlineKeyboardMarkup(keyboard))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
async def handle_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contact = update.message.contact
    phone_number = contact.phone_number
    user_id = update.effective_user.id
    session = user_data.get(user_id)
    if session and session.get("step") == "phone":
        session["phone"] = phone_number
        session["reached_price"] = False
        keyboard = [[InlineKeyboardButton("üìû –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞—è–≤–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="notify_me")]]
        msg = (
            f"üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n"
            f"‚Ä¢ –ú–æ–¥–µ–ª—å: {session['model']}\n"
            f"‚Ä¢ –ì–æ–¥: {session['year']}\n"
            f"‚Ä¢ –ù–∞–≤–∏–≥–∞—Ü–∏—è: {session['nav']}\n"
            f"‚Ä¢ –¶–µ–Ω–∞: {session['price']:.2f} BYN\n"
            f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {session['phone']}"
        )
        await update.message.reply_text(msg, reply_markup=InlineKeyboardMarkup(keyboard))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
async def handle_nav(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    nav = query.data.replace("nav_", "")
    session = user_data.get(user_id, {})
    session["nav"] = nav
    session["step"] = "phone"
    base_price = 100
    if nav == "yes":
        base_price += 40
    session["price"] = base_price
    session["reached_price"] = True
    session["timestamp"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    session["first_name"] = update.effective_user.first_name or "‚Äî"
    session["username"] = f"@{update.effective_user.username}" if update.effective_user.username else "‚Äî"

    async def check_abandoned(user_id, context):
        await asyncio.sleep(300)
        session = user_data.get(user_id)
        if session and session.get("reached_price") and session.get("step") == "phone":
            msg = (
                f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª –∑–∞—è–≤–∫—É:\n"
                f"‚Ä¢ –ò–º—è: {session.get('first_name', '‚Äî')}\n"
                f"‚Ä¢ Username: {session.get('username', '‚Äî')}\n"
                f"‚Ä¢ Telegram ID: {user_id}\n"
                f"‚Ä¢ –ú–æ–¥–µ–ª—å: {session['model']}\n"
                f"‚Ä¢ –ì–æ–¥: {session['year']}\n"
                f"‚Ä¢ –ù–∞–≤–∏–≥–∞—Ü–∏—è: {session['nav']}\n"
                f"‚Ä¢ –¶–µ–Ω–∞: {session['price']:.2f} BYN\n"
                f"‚Ä¢ –í—Ä–µ–º—è: {session['timestamp']}"
            )

            await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=msg)

    context.application.create_task(check_abandoned(user_id, context))

    keyboard = [[KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)]]
    markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await query.edit_message_text(
        f"‚úÖ –°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞.\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {base_price:.2f} BYN\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ +375XXXXXXXXX —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞—è–≤–∫–∏"
    )
    await context.bot.send_message(chat_id=user_id, text="üëá –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=markup)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –∏ —ç–∫—Å–ø–æ—Ä—Ç –≤ —Ç–∞–±–ª–∏—Ü—É
async def handle_notify(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    user = query.from_user
    session = user_data.get(user_id)

    if session:
        session["reached_price"] = False
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        first_name = user.first_name or "‚Äî"
        username = f"@{user.username}" if user.username else "‚Äî"

        # –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        msg = (
            f"üì¨ –ó–∞—è–≤–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
            f"‚Ä¢ –ò–º—è: {first_name}\n"
            f"‚Ä¢ Username: {username}\n"
            f"‚Ä¢ Telegram ID: {user_id}\n"
            f"‚Ä¢ –í—Ä–µ–º—è –∑–∞—è–≤–∫–∏: {timestamp}\n\n"
            f"‚Ä¢ –ú–æ–¥–µ–ª—å: {session['model']}\n"
            f"‚Ä¢ –ì–æ–¥: {session['year']}\n"
            f"‚Ä¢ –ù–∞–≤–∏–≥–∞—Ü–∏—è: {session['nav']}\n"
            f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {session['phone']}\n"
            f"‚Ä¢ –¶–µ–Ω–∞: {session['price']:.2f} BYN"
        )
        await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=msg)

        # –≠–∫—Å–ø–æ—Ä—Ç –≤ Google –¢–∞–±–ª–∏—Ü—É
        SHEET.append_row([
            timestamp,
            first_name,
            username,
            str(user_id),
            session["model"],
            session["year"],
            session["nav"],
            session["phone"],
            f"{session['price']:.2f}"
        ])

        # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        restart_keyboard = [[InlineKeyboardButton("üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="start_calc")]]
        await query.edit_message_text(
            "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            reply_markup=InlineKeyboardMarkup(restart_keyboard)
        )
        user_data.pop(user_id, None)
    else:
        await query.edit_message_text("‚õî –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ —Å /start.")


# –í–µ—Ä—Å–∏—è –∏–∑ Git

from version import get_git_commit_message

async def about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    commit_msg = get_git_commit_message()
    await update.message.reply_text(f"ü§ñ –í–µ—Ä—Å–∏—è –±–æ—Ç–∞: `{commit_msg}`", parse_mode="Markdown")

#import subprocess

#def get_git_commit_message():
#    try:
#        result = subprocess.check_output(["git", "log", "-1", "--pretty=%s"])
#        return result.decode("utf-8").strip()
#    except Exception:
#        return "–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é"
    
#async def about(update: Update, context: ContextTypes.DEFAULT_TYPE):
#    commit_msg = get_git_commit_message()
#    await update.message.reply_text(f"ü§ñ –í–µ—Ä—Å–∏—è –±–æ—Ç–∞: `{commit_msg}`", parse_mode="Markdown")

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
async def main():
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(start_calc, pattern="^start_calc$"))
    app.add_handler(CallbackQueryHandler(handle_nav, pattern="^nav_"))
    app.add_handler(CallbackQueryHandler(handle_notify, pattern="^notify_me$"))
    app.add_handler(MessageHandler(filters.CONTACT, handle_contact))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(CallbackQueryHandler(show_info, pattern="^show_info$"))
    app.add_handler(CallbackQueryHandler(go_back, pattern="^go_back$"))
    app.add_handler(CommandHandler("about", about))

    await app.initialize()
    await app.start()
    await app.updater.start_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", "8080")),
        url_path="/webhook",
        webhook_url=f"{WEBHOOK_URL}/webhook"
    )
    await asyncio.Event().wait()

if __name__ == "__main__":
    asyncio.run(main())