from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
import os

user_data = {}

BOT_TOKEN = os.getenv("BOT_TOKEN") or "YOUR_BOT_TOKEN"
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID") or 123456789)
WEBHOOK_URL = os.getenv("WEBHOOK_URL") or "https://your-app.onrender.com"

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("–ü–æ—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å", callback_data="start_calc")]]
    await update.message.reply_text(
        "‚ö†Ô∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å —Ä—É—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –ø–µ—Ä–µ–ø—Ä–æ—à–∏–≤–∫–∏ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Å–∏—Å—Ç–µ–º FORD.\n\n"
        "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Äî –∏ –ø–æ–ª—É—á–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É.",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–æ—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å"
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    user_data[user_id] = {"step": "year"}
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2019):")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —à–∞–≥–∞–º
async def handle_text_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()
    session = user_data.get(user_id)

    if not session or "step" not in session:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start.")
        return

    step = session["step"]

    if step == "year":
        if not text.isdigit() or not (2000 <= int(text) <= 2025):
            await update.message.reply_text("‚õî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ –æ—Ç 2000 –¥–æ 2025.")
            return
        session["year"] = text
        session["step"] = "model"
        await update.message.reply_text("‚úÖ –ì–æ–¥ –ø—Ä–∏–Ω—è—Ç!\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, Focus, Kuga):")

    elif step == "model":
        if len(text) < 2:
            await update.message.reply_text("‚õî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –º–æ–¥–µ–ª—å.")
            return
        session["model"] = text
        session["step"] = "nav"
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ï—Å—Ç—å", callback_data="nav_yes")],
            [InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="nav_no")],
            [InlineKeyboardButton("‚ùì –ù–µ –∑–Ω–∞—é", callback_data="nav_unknown")]
        ]
        await update.message.reply_text(
            "–ï—Å—Ç—å –ª–∏ –≤ –º—É–ª—å—Ç–∏–º–µ–¥–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è?",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    elif step == "phone":
        if len(text) < 6:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
            return
        session["phone"] = text

        msg = (
            f"üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n"
            f"‚Ä¢ –ì–æ–¥: {session['year']}\n"
            f"‚Ä¢ –ú–æ–¥–µ–ª—å: {session['model']}\n"
            f"‚Ä¢ –ù–∞–≤–∏–≥–∞—Ü–∏—è: {session['nav']}\n"
            f"‚Ä¢ –¶–µ–Ω–∞: 100.00 BYN\n"
            f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {session['phone']}"
        )

        keyboard = [[InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π", callback_data="notify_me")]]
        await update.message.reply_text(msg, reply_markup=InlineKeyboardMarkup(keyboard))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
async def handle_navigation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    nav = query.data.replace("nav_", "")
    session = user_data.get(user_id)

    if not session:
        await query.edit_message_text("–°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å /start.")
        return

    session["nav"] = nav
    session["step"] = "phone"

    await query.edit_message_text(
        "‚úÖ –£—Å–ª—É–≥–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞.\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 100.00 BYN\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏
async def handle_notify(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    summary = user_data.get(user_id, {})

    if summary:
        text = (
            f"üì¨ –ó–∞—è–≤–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
            f"‚Ä¢ –ì–æ–¥: {summary['year']}\n"
            f"‚Ä¢ –ú–æ–¥–µ–ª—å: {summary['model']}\n"
            f"‚Ä¢ –ù–∞–≤–∏–≥–∞—Ü–∏—è: {summary['nav']}\n"
            f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {summary['phone']}"
        )
        await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=text)
        await query.edit_message_text("‚úÖ –°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
        user_data.pop(user_id, None)
    else:
        await query.edit_message_text("‚õî –î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å /start.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ Webhook
if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_callback, pattern="^start_calc$"))
    app.add_handler(CallbackQueryHandler(handle_navigation, pattern="^nav_"))
    app.add_handler(CallbackQueryHandler(handle_notify, pattern="^notify_me$"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_input))

    app.run_webhook(
        listen="0.0.0.0",
        port=int(os.getenv("PORT", "8080")),
        webhook_url=f"{WEBHOOK_URL}/webhook"
    )