from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters
)
import os

user_data = {}

BOT_TOKEN = os.getenv("BOT_TOKEN") or "YOUR_BOT_TOKEN"
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID") or 123456789)  # ‚Üê –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram user ID

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("–ü–æ—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å", callback_data="calculate")]]
    await update.message.reply_text(
        "‚ö†Ô∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å –ø–æ–¥—Å—á–µ—Ç–∞ —Ä—É—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –ø–µ—Ä–µ–ø—Ä–æ—à–∏–≤–∫–∏ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π FORD. "
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤, –∑–∞—Ç–µ–º –≤—ã —É–≤–∏–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏ –∏ —Å–º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø–µ—Ä–µ–ø—Ä–æ—à–∏–≤–∫—É. "
        "–í–Ω–∏–º–∞–Ω–∏–µ: –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏.",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    data = query.data

    if user_id not in user_data:
        user_data[user_id] = {}

    if data == "calculate":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2018):")

async def handle_year(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    year = update.message.text.strip()

    if not year.isdigit() or not (1999 <= int(year) <= 2025):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä: 2021")
        return

    user_data[user_id] = {"year": year, "choice2": []}

    keyboard = [
        [InlineKeyboardButton("–ê", callback_data="step2_A")],
        [InlineKeyboardButton("–ë", callback_data="step2_B")],
        [InlineKeyboardButton("–í", callback_data="step2_V")],
        [InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="finish")]
    ]
    await update.message.reply_text(
        f"‚úÖ –ì–æ–¥: {year}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—É–Ω–∫—Ç–æ–≤:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_options(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    data = query.data

    if user_id not in user_data or "year" not in user_data[user_id]:
        await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å –∫–æ–º–∞–Ω–¥—ã /start")
        return

    if data.startswith("step2_"):
        option = data.split("_")[1]
        if option not in user_data[user_id]["choice2"]:
            user_data[user_id]["choice2"].append(option)
            await query.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {option}", show_alert=True)

    elif data == "finish":
        summary = user_data[user_id]
        price = "100‚ÇΩ"

        msg = (
            f"üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n"
            f"‚Ä¢ –ì–æ–¥ –∞–≤—Ç–æ: {summary['year']}\n"
            f"‚Ä¢ –í—ã–±–æ—Ä(—ã): {', '.join(summary['choice2']) if summary['choice2'] else '‚Äî'}\n"
            f"‚Ä¢ –¶–µ–Ω–∞: {price}"
        )

        await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=msg)
        await query.edit_message_text(f"{msg}\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä!")
        del user_data[user_id]

if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_callback, pattern="^calculate$"))
    app.add_handler(CallbackQueryHandler(handle_options, pattern="^(step2_|finish)"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_year))
    app.run_polling()