import os
import asyncio
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN") or "YOUR_BOT_TOKEN"
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID") or 123456789)
WEBHOOK_URL = "https://chatbot-lead-generator.onrender.com"

user_data = {}

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("üöó –ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å", callback_data="start_calc")]]
    await update.message.reply_text(
        "‚ö†Ô∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å –ø–µ—Ä–µ–ø—Ä–æ—à–∏–≤–∫–∏ –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã—Ö —Å–∏—Å—Ç–µ–º FORD.\n\n"
        "üìç –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ –≥–æ—Ä–æ–¥–µ –ú–∏–Ω—Å–∫.\n\n"
        "–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, –ø–æ—Å–ª–µ —á–µ–≥–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É.",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# –°—Ç–∞—Ä—Ç –æ–ø—Ä–æ—Å–∞
async def start_calc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    user_data[user_id] = {"step": "model"}
    await query.edit_message_text("–£–∫–∞–∂–∏—Ç–µ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, Focus, Kuga):")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ —à–∞–≥–∞–º
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()
    session = user_data.get(user_id)

    if not session:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start.")
        return

    step = session.get("step")

    if step == "model":
        if len(text) < 2:
            await update.message.reply_text("‚õî –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –º–æ–¥–µ–ª—å.")
            return
        session["model"] = text
        session["step"] = "year"
        await update.message.reply_text("‚úÖ –ú–æ–¥–µ–ª—å –ø—Ä–∏–Ω—è—Ç–∞. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2019):")

    elif step == "year":
        if not text.isdigit() or not (2000 <= int(text) <= 2025):
            await update.message.reply_text("‚õî –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ –æ—Ç 2000 –¥–æ 2025.")
            return
        session["year"] = text
        session["step"] = "nav"
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ï—Å—Ç—å", callback_data="nav_yes")],
            [InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="nav_no")]
        ]
        await update.message.reply_text("–ï—Å—Ç—å –ª–∏ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è?", reply_markup=InlineKeyboardMarkup(keyboard))

    elif step == "phone":
        if len(text) < 6:
            await update.message.reply_text("‚õî –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
            return
        session["phone"] = text
        keyboard = [[InlineKeyboardButton("üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="notify_me")]]
        msg = (
            f"üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n"
            f"‚Ä¢ –ú–æ–¥–µ–ª—å: {session['model']}\n"
            f"‚Ä¢ –ì–æ–¥: {session['year']}\n"
            f"‚Ä¢ –ù–∞–≤–∏–≥–∞—Ü–∏—è: {session['nav']}\n"
            f"‚Ä¢ –¶–µ–Ω–∞: {session['price']:.2f} BYN\n"
            f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {session['phone']}"
        )
        await update.message.reply_text(msg, reply_markup=InlineKeyboardMarkup(keyboard))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ —Ä–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
async def handle_nav(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    nav = query.data.replace("nav_", "")
    session = user_data.get(user_id, {})
    session["nav"] = nav
    session["step"] = "phone"

    base_price = 100
    if nav == "yes":
        base_price += 20
    session["price"] = base_price

    await query.edit_message_text(
        f"‚úÖ –£—Å–ª—É–≥–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞.\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {base_price:.2f} BYN\n\n"
        "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –∫–æ–¥–æ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:"
    )

# –§–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥ ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏
async def handle_notify(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    user = query.from_user
    session = user_data.get(user_id)

    if session:
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        first_name = user.first_name or "‚Äî"
        username = f"@{user.username}" if user.username else "‚Äî"

        msg = (
            f"üì¨ –ó–∞—è–≤–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
            f"‚Ä¢ –ò–º—è: {first_name}\n"
            f"‚Ä¢ Username: {username}\n"
            f"‚Ä¢ Telegram ID: {user_id}\n"
            f"‚Ä¢ –í—Ä–µ–º—è –∑–∞—è–≤–∫–∏: {timestamp}\n\n"
            f"‚Ä¢ –ú–æ–¥–µ–ª—å: {session['model']}\n"
            f"‚Ä¢ –ì–æ–¥: {session['year']}\n"
            f"‚Ä¢ –ù–∞–≤–∏–≥–∞—Ü–∏—è: {session['nav']}\n"
            f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {session['phone']}\n"
            f"‚Ä¢ –¶–µ–Ω–∞: {session['price']:.2f} BYN"
        )

        await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=msg)
        await query.edit_message_text("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
        user_data.pop(user_id, None)
    else:
        await query.edit_message_text("‚õî –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ —Å /start.")

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
async def main():
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(start_calc, pattern="^start_calc$"))
    app.add_handler(CallbackQueryHandler(handle_nav, pattern="^nav_"))
    app.add_handler(CallbackQueryHandler(handle_notify, pattern="^notify_me$"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    await app.initialize()
    await app.start()
    await app.updater.start_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", "8080")),
        url_path="/webhook",
        webhook_url=f"{WEBHOOK_URL}/webhook"
    )
    await asyncio.Event().wait()

if __name__ == "__main__":
    asyncio.run(main())